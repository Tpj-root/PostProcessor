firstPierceTime = 0 --this is an extra delay added to the first pierce as needed by some machines

function OnAbout(event)
   ctrl = event:GetTextCtrl()
   ctrl:AppendText("GRBL post processor for milling and routing\n")
   ctrl:AppendText("\n")
   ctrl:AppendText("Modal G-codes and coordinates\n")
   ctrl:AppendText("No comments\n")
   ctrl:AppendText("Incremental IJ\n")
end

post.ForceExtension("nc")



function OnInit()

   post.SetCommentChars ("()", "[]")  --make sure ( and ) characters do not appear in system text
   if(scale == metric) then
      post.Text ("G21\n") --metric mode
      format = "0.0##"
   else
      post.Text ("G20\n") --inch mode
      format = "0.0###"
   end
   bigArcs = 1 --stitch arc segments together
   minArcSize = 0.05 --arcs smaller than this are converted to moves
   firstPierce = firstPierceTime
end

function OnFinish()
   post.Text ("M5 M30\n")
end

function OnRapid()
   post.Text ("G0")
   post.ModalNumber ("X", endX * scale, format)
   post.ModalNumber ("Y", endY * scale, format)
   post.ModalNumber ("Z", endZ * scale, format)
   post.Eol()
end

function OnMove()
   post.Text ("G1")
   post.NonModalNumber ("X", endX * scale, format)
   post.NonModalNumber ("Y", endY * scale, format)
   post.ModalNumber ("Z", endZ * scale, format)
   post.ModalNumber ("F", feedRate * scale, "0.0###")
   post.Eol()
end

function OnArc()
   if(arcAngle <0) then
      post.Text ("G3")
   else
      post.Text ("G2")
   end
   post.NonModalNumber ("X", endX * scale, format)
   post.NonModalNumber ("Y", endY * scale, format)
   post.ModalNumber ("Z", endZ * scale, format)
   post.Text ("I")
   post.Number ((arcCentreX - currentX) * scale, format)
   post.Text ("J")
   post.Number ((arcCentreY - currentY) * scale, format)
   post.ModalNumber ("F", feedRate * scale, "0.0###")
   post.Eol()
end

function OnSpindleCW()
   post.ModalNumber ("S", spindleSpeed, "0.##")
   post.Text ("M03")
   post.Eol()
end

function OnSpindleCCW()
   post.ModalNumber ("S", spindleSpeed, "0.##")
   post.Text ("M04")
   post.Eol()
end

function OnSpindleOff()
   post.Text ("M05\n")
end


function OnToolChange()
end

function OnDrill()
   OnRapid()
   depth = drillStart
   buffer = plungeSafety
   endZ = depth + buffer
   OnRapid()
   if(drillRetract < buffer) then
     buffer = drillRetract
   end
   while depth > drillZ do
      OnRapid()
      depth = depth - drillPeck
      if (depth < drillZ) then
         depth = drillZ
      end
      endZ = depth
      OnMove()
      if (depth > drillZ) then --retract if we need to take another bite
         endZ = endZ + drillRetract
         if (endZ > safeZ) then
            endZ = safeZ
         end
         OnRapid()
         endZ = depth + buffer
      end
   end
   if (endZ < safeZ) then
      endZ = safeZ
      OnRapid()
   end
end
