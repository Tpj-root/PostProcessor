function OnAbout(event)
   ctrl = event:GetTextCtrl()
   ctrl:AppendText("TurboCNC post processor\n")
   ctrl:AppendText("\n")
   ctrl:AppendText("Non modal\n")
   ctrl:AppendText("Uses G72/73 for helical moves\n")
   ctrl:AppendText("No comments\n")
   ctrl:AppendText("Incremental IJ\n")
end


--  revision 3/2/07
--  Removed final safety move. This is now done in SheetCam

--  revision 25/5/06
--  Revised rigid tapping spindle on/off sequencing

--  revision 11/5/06
--  Revised rigid tapping

--  revision 4/5/06
--  Revised tapping cycles

--  revision 2/5/06
--  Added tapping cycle

--   revision 7/10/05
--   Added new arc handling

--   revision 20/10/04
--   added tool length offsets

--   revision 28/7/04
--   Added drill start depth

--   revision 26/7/04
--   removed all comments

--   revision 19/7/04
--   added drill cycle

--   revision 28/6/04
--   Replaced startx,y,z with currentx,y,z

--   revision 25/6/04
--   removed Z word for G01/G02

--   revision 23/6/04
--   changed to non-modal

--   Revision 5/6/04
--   changed line numbering to start at 0 and inc by 10
--   Changed comments to use ;

--   Revision 28/5/04
--   Added plunge,feed,spindle speed warnings

--   Revision 18/5/04
--   Added Metric + Inch variables and easy inch/metric swapping
--   Added auto detect G02/G03 or G72/G73
--   changed to fixed number of trailing zeros
--   Created 11/5/2004



function OnInit()
   post.SetCommentChars ("();", "[]:")  --make sure ( and ) characters do not appear in system text
--   text (" ;Filename: ", filename, "\n")
--   text (" ;Post processor: ", postname, "\n")
--   text (" ;Date: ", date, "\n")
   if(scale == metric) then
--      text(" ;Units: Metric\n")
      post.Text (" G21\n") --metric mode
   else
--      text(" ;Units: Inches\n")
      post.Text (" G20\n") --inch mode
   end
   post.Text (" G17\n")  --XY plane
   post.Text (" G94\n")  --feed in units/min
   post.Text (" G90\n")  --absolute
   bigArcs = 1 --stitch arc segments together
   minArcSize = 0.05 --arcs smaller than this are converted to moves
end

function OnNewLine()
   post.Text ("N")
   post.Number (lineNumber, "0000")
   lineNumber = lineNumber + 10
end


function OnFinish()
   post.Text (" M05\n M30\n")
end

function OnRapid()
   post.Text (" G00")
   post.Text(" X")
   post.Number (endX * scale, "0.0000")
   post.Text(" Y")
   post.Number (endY * scale, "0.0000")
   post.Text(" Z")
   post.Number ((endZ + toolOffset) * scale, "0.0000")
   post.Eol()
end

function OnMove()
   post.Text (" G01")
   post.Text(" X")
   post.Number (endX * scale, "0.0000")
   post.Text(" Y")
   post.Number (endY * scale, "0.0000")
   post.Text(" Z")
   post.Number ((endZ + toolOffset) * scale, "0.0000")
   post.Text(" F")
   post.Number (feedRate * scale, "0.######")
   post.Text(" S")
   post.Number (spindleSpeed, "0.##")
   post.Eol()
end

function OnArc()
   if(currentZ == endZ) then
      if(arcAngle <0) then
         post.Text (" G03")  --use circ moves
      else
         post.Text (" G02")  --use circ moves
      end
   else
      if(arcAngle <0) then
         post.Text (" G73")  --use helical moves
      else
         post.Text (" G72")  --use helical moves
      end
   end
   post.Text(" X")
   post.Number (endX * scale, "0.0000")
   post.Text(" Y")
   post.Number (endY * scale, "0.0000")
   if(currentZ ~= endZ) then
      post.Text(" Z")
      post.Number ((endZ + toolOffset) * scale, "0.0000")
   end
   post.Text (" I")
   post.Number ((arcCentreX - currentX) * scale, "0.0000")
   post.Text (" J")
   post.Number ((arcCentreY - currentY) * scale, "0.0000")
   post.Text(" F")
   post.Number (feedRate * scale, "0.######")
   post.Text(" S")
   post.Number (spindleSpeed, "0.##")
   post.Eol()
end


function OnSpindleCW()
   post.Text (" M03")
   post.Text(" S")
   post.Number (spindleSpeed, "0.##")
   post.Eol()
end

function OnSpindleCCW()
   post.Text (" M04")
   post.Text(" S")
   post.Number (spindleSpeed, "0.##")
   post.Eol()
end

function OnSpindleOff()
   post.Text (" M05\n")
end


function OnNewOperation()
--   text (" ;Operation: ", operationName, "\n")
   if (plungeRate <= 0) then
      post.Warning("WARNING: Plunge rate is zero")
   end
   if (feedRate <= 0) then
      post.Warning("WARNING: Feed rate is zero")
   end
end

function OnToolChange()
   post.Text (" M06 T")
   post.Number (tool, "0")
--   text ("  ;", toolname, "\n")
end



function OnSpindleChanged()
   if (spindleSpeed <= 0) then
      post.Warning("WARNING: Spindle speed is zero")
   end
end


function OnFloodOn()
   post.Text(" M08\n")
end

function OnMistOn()
   post.Text(" M07\n")
end

function OnCoolantOff()
   post.Text(" M09\n")
end


function OnDrill()
   OnRapid()
   depth = drillStart
   buffer = plungeSafety
   endZ = depth + buffer
   OnRapid()
   if(drillRetract < buffer) then
     buffer = drillRetract
   end
   while depth > drillZ do
      OnRapid()
      depth = depth - drillPeck
      if (depth < drillZ) then
         depth = drillZ
      end
      endZ = depth
      OnMove()
      if (depth > drillZ) then --retract if we need to take another bite
         endZ = endZ + drillRetract
         if (endZ > safeZ) then
            endZ = safeZ
         end
         OnRapid()
      end
      endZ = depth + buffer
   end
   if (endZ < safeZ) then
      endZ = safeZ
      OnRapid()
   end
end

function OnSetFeed()
end

function OnTapStart()
   post.Text(" M49\n") --disable FRO
   post.Text(" G95\n") --feed per rev
end

function OnAutoTap()
   clearance = 1 --tapping clearance height

--move to hole X,Y coordinates
   OnRapid()

--move to tapping clearance height
   clearance = clearance + drillStart
   endZ = clearance
   OnRapid()

--feed to depth
   feedRate = tapPitch * underFeed
   OnSetFeed()
   endZ = drillZ
   OnMove()

--retract to engage reverse clutch
   endZ = drillZ + tapTravel
   OnRapid()

--feed out
   feedRate = tapPitch * reverseMult * underFeed
   endZ = tapTravel + clearance
   OnMove()

--retract to clearance plane
   endZ = safeZ
   OnRapid()

end

function OnRigidTap()
   clearance = 1 --tapping clearance height

   spindlecache = spindleSpeed

--spindle forwards
   if(spindleDir == 1) then
      OnSpindleCW()
   else
      OnSpindleCCW()
   end


--move to hole X,Y coordinates
   OnRapid()

--move to tapping clearance height
   endZ = clearance + drillStart
   OnRapid()

--tap to depth, correcting for underfeed
   feedRate = tapPitch * underFeed
   OnSetFeed()
   depthfix = (drillStart - drillZ) * (1 - underFeed)
   endZ = drillZ + depthfix
   OnMove()

--reverse spindle
   OnSpindleOff()
   spindleSpeed = spindlecache * reverseMult
   if(spindleDir == -1) then
      OnSpindleCW()
   else
      OnSpindleCCW()
   end

--feed out
   feedRate = tapPitch * reverseMult * underFeed
   OnSetFeed()
   endZ = clearance + drillStart
   OnMove()

--stop spindle and restore speed to tapping speed
   OnSpindleOff()
   spindleSpeed = spindlecache


--retract to clearance plane
   endZ = safeZ
   OnRapid() --retract to clearance plane

end


function OnTapEnd()
   post.Text(" M48\n") --enable FRO
   post.Text(" G94\n") --feed per min
end
