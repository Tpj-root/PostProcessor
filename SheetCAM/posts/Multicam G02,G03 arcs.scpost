function OnAbout(event)
   ctrl = event:GetTextCtrl()
   ctrl:AppendText("Minimum G-code post processor\n")
   ctrl:AppendText("\n")
   ctrl:AppendText("Min spec g-code for compatibility with as many controllers as possible\n")
   ctrl:AppendText("Non modal G-codes\n")
   ctrl:AppendText("Modal coordinates\n")
   ctrl:AppendText("No comments\n")
   ctrl:AppendText("Incremental IJ\n")
   ctrl:AppendText("G-codes used:\n")
   ctrl:AppendText("G00,G01,G02,G03,G20,G21\n")
   ctrl:AppendText("M-codes used:\n")
   ctrl:AppendText("M03,M04,M05,M07,M08,M09\n")
end




--  revision 3/2/07
--  Removed final safety move. This is now done in SheetCam

--   Created 19/10/2004
--   based on Mach2.post


function OnInit()
   post.Text(" M90\n")
   post.SetCommentChars ("()", "[]")  --make sure ( and ) characters do not appear in system text
   if(scale == metric) then
      post.Text (" G71\n") --metric mode
   else
      post.Text (" G70\n") --inch mode
   end
   post.Text (" G74\n") --Incremental arc centres
   post.Text (" G17\n")
--   text (" G40 G90\n F1\n")
   bigArcs = 1 --stitch arc segments together
   minArcSize = 0.05 --arcs smaller than this are converted to moves
end

function OnNewLine()
   post.Text ("N")
   post.Number (lineNumber, "0000")
   lineNumber = lineNumber + 10
end


function OnFinish()
   post.Text (" M22\n M02\n")
end

function OnRapid()
   post.Text (" G00")
   post.ModalNumber (" X", endX * scale, "0.0000")
   post.ModalNumber (" Y", endY * scale, "0.0000")
   if(endZ < 1e17) then
      post.ModalNumber (" Z", (endZ + toolOffset) * (-scale), "0.0###")
   end
   post.Eol()
end

function OnMove()
   post.Text (" G01")
   post.ModalNumber (" X", endX * scale, "0.0000")
   post.ModalNumber (" Y", endY * scale, "0.0000")
   post.ModalNumber (" Z", (endZ + toolOffset) * (-scale), "0.0###")
   post.ModalNumber (" F", feedRate * scale, "0.###")
   post.Eol()
end

function OnArc()
   if(arcAngle <0) then
      post.Text (" G03")
   else
      post.Text (" G02")
   end
   post.ModalNumber (" X", endX * scale, "0.0000")
   post.ModalNumber (" Y", endY * scale, "0.0000")
   post.ModalNumber (" Z", (endZ + toolOffset) * (-scale), "0.0###")
   post.Text (" I")
   post.Number ((arcCentreX - currentX) * scale, "0.0000")
   post.Text (" J")
   post.Number ((arcCentreY - currentY) * scale, "0.0000")
   post.ModalNumber (" F", feedRate * scale, "0.0###")
   post.Eol()
end

function OnSpindleChanged()
   post.Text (" G97 S")
   post.Number (spindleSpeed, "0.##")
   post.Eol()
end

function OnToolChange()
   post.Text (" G00 T")
   post.Number (tool, "0")
   post.Eol()
end

function OnSpindleCW()
   post.Text (" M12")
--   modalnumber (" S", spindlespeed, "0.##")
   post.Eol()
end

function OnSpindleCCW()
--   post.Text (" M04")
--   modalnumber (" S", spindlespeed, "0.##")
--   post.Eol()
   post.Warning("Cannot run spindle in reverse")
end

function OnSpindleOff()
   post.Text (" M22\n")
end



function OnNewPart()
end


function OnFloodOn()
   post.Text(" M08\n")
end

function OnMistOn()
   post.Text(" M07\n")
end

function OnCoolantOff()
   post.Text(" M09\n")
end

function OnDrill()
   OnRapid()
   depth = drillStart
   buffer = plungeSafety
   endZ = depth + buffer
   OnRapid()
   if(drillRetract < buffer) then
     buffer = drillRetract
   end
   while depth > drillZ do
      OnRapid()
      depth = depth - drillPeck
      if (depth < drillZ) then
         depth = drillZ
      end
      endZ = depth
      OnMove()
      if (depth > drillZ) then --retract if we need to take another bite
         endZ = endZ + drillRetract
         if (endZ > safeZ) then
            endZ = safeZ
         end
         OnRapid()
         endZ = depth + buffer
      end
   end
   if (endZ < safeZ) then
      endZ = safeZ
      OnRapid()
   end
end
