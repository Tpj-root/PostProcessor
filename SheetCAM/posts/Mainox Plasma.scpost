function OnAbout(event)
   ctrl = event:GetTextCtrl()
   ctrl:AppendText("Mach3 plasma post processor\n")
   ctrl:AppendText("\n")
   ctrl:AppendText("Generic plasma post for machines without THC\n")
   ctrl:AppendText("\n")
   ctrl:AppendText("Modal G-codes and coordinates\n")
   ctrl:AppendText("Comments enclosed with ( and )\n")
   ctrl:AppendText("M03/M05 turn the torch on/off\n")
   ctrl:AppendText("Incremental IJ\n")
end


--  revision 3/2/07
--  Removed final safety move. This is now done in SheetCam

--   revision 7/10/05
--   Added new arc handling

--   revision 11/7/05
--   Moved torch to cut height when preheating
--   Added dummy spindle speed to prevent Mach2 throwing a zero spindle speed error

--   revision 9/10/04
--   Added preheat

--   revision 28/6/04
--   Replaced startx,y,z with currentx,y,z

--   created 28/5/04
--   Based on Mach2 metric.post



function OnInit()

   post.SetCommentChars ("()", "[]")  --make sure ( and ) characters do not appear in system text
   post.Text ("(%%BEGIN_VARS)\n")
   post.Text ("(%%END_VARS)\n")
   post.Text ("%\n")
   post.Text ("(NOMBRE DE PROGRAMA: ", fileName, ")\n")
   post.Text ("(POST PROCESADOR:: ", postName, ")\n")
   post.Text ("(FECHA CREACION: ", date, ")\n")
   bigArcs = 1 --stitch arc segments together
   minArcSize = 0.05 --arcs smaller than this are converted to moves
end

function OnNewLine()
   post.Text ()

end


function OnFinish()
   post.Text ("M02\n")
end

function OnRapid()
   if(math.hypot(currentX - endX, currentY - endY) < 0.001) then return end
   post.ModalText ("G00")
   post.ModalNumber (" X", endX * scale, "0.0000")
   post.ModalNumber (" Y", endY * scale, "0.0000")
--   post.ModalNumber (" Z", endZ * scale, "0.0000")
   post.Eol()
end

function OnMove()
   if(math.hypot(currentX - endX, currentY - endY) < 0.001) then return end
   post.ModalText ("G01")
   post.ModalNumber ("X", endX * scale, "0.0000")
   post.ModalNumber ("Y", endY * scale, "0.0000")
--   post.ModalNumber (" Z", endZ * scale, "0.0000")
   post.Eol()
end

function OnArc()
   if(arcAngle <0) then
      post.ModalText ("G03")
   else
      post.ModalText ("G02")
   end
   post.NonModalNumber (" X", endX * scale, "0.0000")
   post.NonModalNumber (" Y", endY * scale, "0.0000")
--   post.ModalNumber (" Z", endZ * scale, "0.0000")
   post.Text (" I")
   post.Number ((arcCentreX - currentX) * scale, "0.0000")
   post.Text (" J")
   post.Number ((arcCentreY - currentY) * scale, "0.0000")
   post.Eol()
end


function OnPenDown()
   if (preheat > 0.001) then
--      post.ModalText ("G00")
--      post.ModalNumber (" Z", cutHeight * scale, "0.0000")
      post.Text (" G04 P")
      post.Number (preheat,"0.###")
      post.Eol()
   end
--   post.ModalText (" G00")
--   post.ModalNumber (" Z", pierceHeight * scale, "0.0000")
   post.Text ("M07\n")
end


function OnPenUp()
   post.Text ("M08\n")
end


function OnNewOperation()
   post.Text ("(OPERACION: ", operationName, ")\n")
   post.Text ("L<INICIO>\n")
end

function OnComment()
  post.Text(" (",commentText,")\n")
end

function OnToolChange()
end

function OnNewPart()
   post.Text("(PIEZA CARGADA: ",partName,")\n");
end

function OnDrill()
   OnRapid()
   OnPenDown()
   endZ = drillZ
   OnMove()
   OnPenUp()
   endZ = safeZ
   OnRapid()
end
