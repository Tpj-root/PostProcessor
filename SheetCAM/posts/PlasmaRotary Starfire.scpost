--************************************************
--*** Set these values up to suit your machine ***
--************************************************


-- Rapids will move the shortest distance to the next cut but may cause machines with limited rotation
-- to 'wind up'. Set this to 0 to disable optimisation.
--defaults to 1 if not defined
optimiseRapids = 1

--This is the axis that is used for rotation
rotaryAxis = " X"

--Set this to however many units are needed to rotate the axis one revolution.
unitsPerRev=360


--This is the axis that moves along the tube
linearAxis = " Y"

--************************************************
--***           End of settings                ***
--************************************************


function OnAbout(event)
   ctrl = event:GetTextCtrl()
   ctrl:AppendText("Rotary post processor for Starfire 2-axis controllers\n")
   ctrl:AppendText("\n")
   ctrl:AppendText("NOTE: Only for round tube\n")
   ctrl:AppendText("It will not work for any other profile shape\n")
end


post.ForceExtension("cnc")



function OnInit()
   post.SetCommentChars ("()", "[]")  --make sure ( and ) characters do not appear in system text
   post.Text("G40\n")
   bigArcs = 1 --stitch arc segments together
   minArcSize = 0.05 --arcs smaller than this are converted to moves
   currentA = 1e17
end

function OnFinish()
   post.Text ("M02\n")
end

function OnRapid()
   if(math.hypot(endX - currentX, endA - currentA) < 0.001) then return end
   currentA = endA
   post.Text ("G00")
   post.ModalNumber (linearAxis, endX * scale, "0.0000")
   post.ModalNumber (rotaryAxis, endA * scale, "0.0000")
   post.Eol()
end

function OnMove()
   if(math.hypot(endX - currentX, endA - currentA) < 0.001) then return end
   currentA = endA
   post.Text ("G01")
   post.ModalNumber (linearAxis, endX * scale, "0.0000")
   post.ModalNumber (rotaryAxis, endA * scale, "0.0000")
   post.ModalNumber (" F", feedRate * scale, "0.###")
   post.Eol()
end

function OnArc()
post.Error("This post only works for round tube")
--[[
   currentA = endA
   if(arcAngle <0) then
      post.Text ("G03")
   else
      post.Text ("G02")
   end
   post.ModalNumber (linearAxis, endX * scale, "0.0000")
   post.ModalNumber (rotaryAxis, endA * scale, "0.0000")
   post.Text (" I")
   post.Number ((arcCentreX - currentX) * scale, "0.0000")
   post.Text (" J")
   post.Number ((arcCentreY - currentA) * scale, "0.0000")
   post.ModalNumber (" F", feedRate * scale, "0.0###")
   post.Eol()
]]
end

function OnPenDown()
   post.Text("M07\n")
end

function OnPenUp()
   post.Text("M08\n")
end

function OnDrill()
   OnRapid()
   OnPenDown()
   endZ = drillZ
   OnMove()
   OnPenUp()
   endZ = safeZ
   OnRapid()
end

ignorePierceHeightMove = true
package.path = sc.Globals:Get().thisDir .. "/plugins/RotaryPlasma/?.lua"
require("rotaryhelper")