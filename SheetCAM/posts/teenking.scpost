function OnAbout(event)
   ctrl = event:GetTextCtrl()
   ctrl:AppendText("Teenking waterjet post processor\n")
   ctrl:AppendText("\n")
end

--post.SetOptions(post.ARC_SEGMENTS)

function OnInit()

   post.SetCommentChars ("()", "[]")  --make sure ( and ) characters do not appear in system text
--[[   post.Text (" (Filename: ", fileName, ")\n")
   post.Text (" (Post processor: ", postName, ")\n")
   post.Text (" (Date: ", date, ")\n")
   if(scale == metric) then
      post.Text (" G21 (Units: Metric)\n") --metric mode
   else
      post.Text (" G20 (Units: Inches)\n") --inch mode
   end
   post.Text (" G53 G90 G91.1 G40\n F1\n S500\n")--]]
   minArcSize = 0.05 --arcs smaller than this are converted to moves
end

--[[
function OnNewLine()
   post.Text ("N")
   post.Number (lineNumber, "0000")
   lineNumber = lineNumber + 10
end]]


function OnFinish()
--   post.Text (" M05 M30\n")
end

function OnRapid()
   if(math.hypot(currentX - endX, currentY - endY) < 0.001) then return end
   if(endX >= 1e17 and endY >= 1e17) then return end
   post.Text (" G00")
   if(endX < 1e17) then
      post.NonModalNumber (" X", endX * scale, "0.0000")
   end
   if(endY < 1e17) then
      post.NonModalNumber (" Y", endY * scale, "0.0000")
   end
--   post.ModalNumber (" Z", endZ * scale, "0.0000")
   post.Eol()
end

function OnMove()
   if(math.hypot(currentX - endX, currentY - endY) < 0.001) then return end
   post.Text (" G01")
   post.NonModalNumber (" X", endX * scale, "0.0000")
   post.NonModalNumber (" Y", endY * scale, "0.0000")
--   post.ModalNumber (" Z", endZ * scale, "0.0000")
   post.ModalNumber (" F", feedRate * scale, "0.0###")
   post.Eol()
end

function OnArc()
   if(math.abs(arcAngle) > 6.2831) then
      local ex = endX
      local ey = endY
      arcAngle = arcAngle /2;
      local dx = currentX - arcCentreX
      local dy = currentY - arcCentreY
      local ea = math.atan2(dx, dy) + arcAngle
      local rad = math.hypot(dx,dy)
      endX = (math.sin(ea) * rad) + arcCentreX
      endY = (math.cos(ea) * rad) + arcCentreY
      OnArc()
      currentX = endX
      currentY = endY
      endX = ex
      endY = ey
   end

   if(arcAngle <0) then
      post.Text (" G03")
   else
      post.Text (" G02")
   end 
   post.NonModalNumber (" X", endX * scale, "0.0000")
   post.NonModalNumber (" Y", endY * scale, "0.0000")
--   post.ModalNumber (" Z", endZ * scale, "0.0000")
   post.Text (" I")
   post.Number ((arcCentreX - currentX) * scale, "0.0000")
   post.Text (" J")
   post.Number ((arcCentreY - currentY) * scale, "0.0000")
   post.ModalNumber (" F", feedRate * scale, "0.0###")
   post.Eol()
end

--[[
function OnPenDown()
   if (preheat > 0.001) then
--      post.ModalText (" G00")
--      post.ModalNumber (" Z", cutHeight * scale, "0.0000")
      post.Text (" G04 P")
      post.Number (preheat,"0.###")
      post.Eol()
   end
--   post.ModalText (" G00")
--   post.ModalNumber (" Z", pierceHeight * scale, "0.0000")
   post.Text (" M03\n")
   if (pierceDelay > 0.001) then
      post.Text (" G04 P")
      post.Number (pierceDelay,"0.###")
      post.Eol()
   end
end


function OnPenUp()
   post.Text (" M05\n")
   if (endDelay > 0) then
      post.Text (" G04 P")
      post.Number (endDelay,"0.###")
      post.Eol()
   end
end
--]]

function OnNewOperation()
--   post.Text (" (Operation: ", operationName, ")\n")
end

function OnComment()
  post.Text(" (",commentText,")\n")
end

function OnToolChange()
end

function OnNewPart()
--   post.Text(" (Part: ",partName,")\n");
end

function OnDrill()
   OnRapid()
   OnPenDown()
   endZ = drillZ
   OnMove()
   OnPenUp()
   endZ = safeZ
   OnRapid()
end
