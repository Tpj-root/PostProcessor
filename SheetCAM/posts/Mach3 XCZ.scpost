--Approximate size of each move. Decreasing this number increases accuracy but also increases codes size
resolution = 0.1

--Angle scale 180/math.pi equates to degrees
aScale = 180 / math.pi

function OnAbout(event)
   ctrl = event:GetTextCtrl()
   ctrl:AppendText("Mach3 post processor\n")
   ctrl:AppendText("For machining on a rotary table or in a lathe with accurate spindle control\n")
   ctrl:AppendText("\n")
   ctrl:AppendText("Non modal G-codes\n")
   ctrl:AppendText("Modal coordinates\n")
end


--   Created 11/5/2004

function OnInit()
   post.SetCommentChars ("()", "[]")  --make sure ( and ) characters do not appear in system text
   post.Text (" (Filename: ", fileName, ")\n")
   post.Text (" (Post processor: ", postName, ")\n")
   post.Text(" (Date:",date," Time:",time,")\n")
   if(scale == metric) then
      post.Text (" G21 (Units: Metric)\n") --metric mode
   else
      post.Text (" G20 (Units: Inches)\n") --inch mode
   end
   post.Text (" G40 G90 G91.1\n F1\n")
   minArcSize = 0.05 --arcs smaller than this are converted to moves
   lasta  = 0
   lastr = 0
end

function OnNewLine()
   post.Text ("N")
   post.Number (lineNumber, "0000")
   lineNumber = lineNumber + 10
end


function OnFinish()
   post.Text (" M05 M30\n")
end


function OnRapid()
   post.ModalText (" G00")
   DoMove(endX, endY, endZ, false)
end
   
function DoMove(x,y,z,f)
   local r = math.hypot(x,y) 
   post.ModalNumber (" X", r * scale, "0.0###")
   local a = lasta
   if(r > 0) then
      local a = math.atan2(x,y)
      post.ModalNumber (" C", a * aScale, "0.0###")
   end
   post.ModalNumber (" Z", (z + toolOffset) * scale, "0.0###")
   if(f) then
--[[      local da = math.abs(r * (a - lasta))
      local dr = math.abs(r - lastr)
      local dar = math.hypot(da,dr)
      
      if(dar > 0) then
         local fa = (f / r) * angScale
         local fr = f * scale
       ]]  
         
      
      post.ModalNumber(" F", feedRate * scale, "0.0##")
   end
   post.Eol()
   lasta = a
   lastr = r
end

function OnMove()
   post.ModalText (" G01")
   local dx = endX - currentX
   local dy = endY - currentY
   local dz = endZ - currentZ
   local len = math.hypot(dx, dy)
   local nSteps = (len / resolution) + 0.5
   nSteps = math.toint(nSteps)
   if(nSteps < 1) then nSteps = 1 end
   local xInc = dx / nSteps
   local yInc = dy / nSteps
   local zInc = dz / nSteps
   for c = 1, nSteps, 1 do
      currentX = currentX + xInc
      currentY = currentY + yInc
      currentZ = currentZ + zInc
      DoMove(currentX, currentY, currentZ, true)
   end
end

function OnArc()
   post.ArcAsMoves(0.05)
end

--[[
function OnSpindleCW()
   post.ModalNumber (" S", spindleSpeed, "0.##")
   post.Text (" M03")
   post.Eol()
end

function OnSpindleCCW()
   post.ModalNumber (" S", spindleSpeed, "0.##")
   post.Text (" M04")
   post.Eol()
end

function OnSpindleOff()
   post.Text (" M05\n")
end
]]

function OnNewOperation()
   post.Text (" (Operation: ", operationName, ")\n")
end

function OnComment()
  post.Text(" (",commentText,")\n")
end

function OnToolChange()
   post.Text (" (", toolName, ")\n")
   post.Text (" T")
   post.Number (tool, "0")
   post.Text (" M06  G43 H")
   post.Number (tool, "0")
   post.Eol()
   if (plungeRate <= 0) then
      post.Warning("WARNING: Plunge rate is zero")
   end
   if (feedRate <= 0) then
      post.Warning("WARNING: Feed rate is zero")
   end
end

--[[
function OnSpindleChanged()
   post.ModalNumber (" S", spindleSpeed, "0.##")
   if (spindleSpeed <= 0) then
      post.Warning("WARNING: Spindle speed is zero")
   end
end
]]

function OnNewPart()
   post.Text(" (Part: ",partName,")\n");
end


function OnFloodOn()
   post.Text(" M08 (Flood coolant on)\n")
end

function OnMistOn()
   post.Text(" M07 (Mist coolant on)\n")
end

function OnCoolantOff()
   post.Text(" M09 (Coolant off)\n")
end

function OnDrill()
   OnRapid()
   depth = drillStart
   buffer = plungeSafety
   endZ = depth + buffer
   OnRapid()
   if(drillRetract < buffer) then
     buffer = drillRetract
   end
   while depth > drillZ do
      OnRapid()
      depth = depth - drillPeck
      if (depth < drillZ) then
         depth = drillZ
      end
      endZ = depth
      OnMove()
      if (depth > drillZ) then --retract if we need to take another bite
         endZ = endZ + drillRetract
         if (endZ > safeZ) then
            endZ = safeZ
         end
         OnRapid()
         endZ = depth + buffer
      end
   end
   if (endZ < safeZ) then
      endZ = safeZ
      OnRapid()
   end
end
--[[
function OnSetFeed()
end

function OnTapStart()
   post.Text(" M49\n") --disable FRO
   post.Text(" G95\n") --feed per rev
end

function OnAutoTap()
   clearance = 1 --tapping clearance height

--move to hole X,Y coordinates
   OnRapid()

--move to tapping clearance height
   clearance = clearance + drillStart
   endZ = clearance
   OnRapid()

--feed to depth
   feedRate = tapPitch * underFeed
   OnSetFeed()
   endZ = drillZ
   OnMove()

--retract to engage reverse clutch
   endZ = drillZ + tapTravel
   feedRate = 10000
   OnMove()

--feed out
   feedRate = tapPitch * reverseMult * underFeed
   endZ = tapTravel + clearance
   OnMove()

--retract to clearance plane
   endZ = safeZ
   OnRapid()

end

function OnRigidTap()
   clearance = 1 --tapping clearance height

   spindlecache = spindleSpeed

--spindle forwards
   if(spindleDir == 1) then
      OnSpindleCW()
   else
      OnSpindleCCW()
   end


--move to hole X,Y coordinates
   OnRapid()

--move to tapping clearance height
   endZ = clearance + drillStart
   OnRapid()

--tap to depth, correcting for underfeed
   feedRate = tapPitch * underFeed
   OnSetFeed()
   depthfix = (drillStart - drillZ) * (1 - underFeed)
   endZ = drillZ + depthfix
   OnMove()

--reverse spindle
   OnSpindleOff()
   spindleSpeed = spindlecache * reverseMult
   if(spindleDir == -1) then
      OnSpindleCW()
   else
      OnSpindleCCW()
   end

--feed out
   feedRate = tapPitch * reverseMult * underFeed
   OnSetFeed()
   endZ = clearance + drillStart
   OnMove()

--stop spindle and restore speed to tapping speed
   OnSpindleOff()
   spindleSpeed = spindlecache


--retract to clearance plane
   endZ = safeZ
   OnRapid() --retract to clearance plane

end


function OnTapEnd()
   post.Text(" M48\n") --enable FRO
   post.Text(" G94\n") --feed per min
end
]]