function OnAbout(event)
   ctrl = event:GetTextCtrl()
   ctrl:AppendText("Mach3 post processor\n")
   ctrl:AppendText("\n")
   ctrl:AppendText("Allows for two cutter heads, on separate Z axes.\n")
   ctrl:AppendText("Edit the post to select th axis names, head offsets etc\n")
   ctrl:AppendText("\n")
   ctrl:AppendText("Non modal G-codes\n")
   ctrl:AppendText("Modal coordinates\n")
   ctrl:AppendText("Comments enclosed with ( and )\n")
   ctrl:AppendText("Incremental IJ\n")
   ctrl:AppendText("uses G43 tool length offsets\n")
   ctrl:AppendText("Can use two separate Z axes\n")
end




--    Changed 6/6/08
--    Added different M-codes for each head

--   Created 19/2/2004



function OnInit()
--head axis letters note the space before the letter is important!

   Head1Axis = " Z"
   Head2Axis = " A"

-- set these values to the offsets on the second head

   Head2X = 100
   Head2Y = 0
   Head2Z = 0

-- This is the first tool that will be used on head 2
-- All numbers below this will be on head 1,
-- all numbers equal to this or above will be on head 2

   Head2FirstTool = 100

-- Codes to turn the heads on/off
-- first head
   Head1CW = " M03" --clockwise
   Head1CCW = " M03" --counter clockwise
   Head1Off  = " M05"

-- second head
   Head2CW = " M04"
   Head2CCW = " M03" --counter clockwise
   Head2Off  = " M05"

-- you don't need to change anything below this line


   post.SetCommentChars ("()", "[]")  --make sure ( and ) characters do not appear in system text
   post.Text (" (Filename: ", fileName, ")\n")
   post.Text (" (Post processor: ", postName, ")\n")
   post.Text (" (Date: ", date, ")\n")
   if(scale == metric) then
      post.Text (" G21 (Units: Metric)\n") --metric mode
   else
      post.Text (" G20 (Units: Inches)\n") --inch mode
   end
   post.Text (" G40 G90 G91.1\n F1\n")
   bigarcs = 1 --stitch arc segments together
   minArcSize = 0.05 --arcs smaller than this are converted to moves

   CurrentAxis = Head1Axis
   XOffset = 0
   YOffset = 0
   ZOffset = 0
end

function OnNewLine()
   post.Text ("N")
   post.Number (lineNumber, "0000")
   lineNumber = lineNumber + 10
end


function OnFinish()
   post.Text (Head1Off, "\n")
   post.Text (Head2Off, "\n")
   post.Text (" M30\n")
end

function OnRapid()
   post.ModalText (" G00")
   post.ModalNumber (" X", (endX + XOffset) * scale, "0.0000")
   post.ModalNumber (" Y", (endY + YOffset) * scale, "0.0000")
   post.ModalNumber (CurrentAxis, (endZ + toolOffset + ZOffset) * scale, "0.0000")
   post.Eol()
end

function OnMove()
   post.ModalText (" G01")
   post.ModalNumber (" X", (endX + XOffset) * scale, "0.0000")
   post.ModalNumber (" Y", (endY + YOffset) * scale, "0.0000")
   post.ModalNumber (CurrentAxis, (endZ + toolOffset + ZOffset) * scale, "0.0000")
   post.ModalNumber (" F", feedRate * scale, "0.###")
   post.ModalNumber (" S", spindleSpeed, "0.##")
   post.Eol()
end

function OnArc()
   if(arcAngle <0) then
      post.ModalText (" G03")
   else
      post.ModalText (" G02")
   end
   post.NonModalNumber (" X", (endX + XOffset) * scale, "0.0000")
   post.NonModalNumber (" Y", (endY + YOffset) * scale, "0.0000")
   post.ModalNumber (CurrentAxis, (endZ + toolOffset + ZOffset) * scale, "0.0000")
   post.Text (" I")
   post.Number ((arcCentreX - currentX) * scale, "0.0000")
   post.Text (" J")
   post.Number ((arcCentreY - currentY) * scale, "0.0000")
   post.ModalNumber (" F", feedRate * scale, "0.0###")
   post.ModalNumber (" S", spindleSpeed, "0.##")
   post.Eol()
end


function OnSpindleCW()
   if(tool < Head2FirstTool) then
      post.Text(Head1CW)
   else
      post.Text(Head2CW)
   end
   post.ModalNumber (" S", spindleSpeed, "0.##")
   post.Eol()
end

function OnSpindleCCW()
   if(tool < Head2FirstTool) then
      post.Text(Head1CCW)
   else
      post.Text(Head2CCW)
   end
   post.ModalNumber (" S", spindleSpeed, "0.##")
   post.Eol()
end

function OnSpindleOff()
   post.Text (Head1Off, "\n")
   if(Head1Off ~= Head2Off) then
      post.Text (Head2Off, "\n")
   end
end


function OnNewOperation()
   post.Text (" (Operation: ", operationName, ")\n")
   if (plungeRate <= 0) then
      post.Warning("WARNING: Plunge rate is zero")
   end
   if (feedRate <= 0) then
      post.Warning("WARNING: Feed rate is zero")
   end
end

function OnComment()
  post.Text(" (",commentText,")\n")
end

function OnToolChange()
   post.Text (" (", toolName, ")\n")
   post.Text (" T")
   post.Number (tool, "0")
   post.Text (" M06  G43 H")
   post.Number (tool, "0")
   post.Eol()
   if(tool < Head2FirstTool) then
      XOffset = 0
      YOffset = 0
      ZOffset = 0
      CurrentAxis = Head1Axis
   else
      XOffset = Head2X
      YOffset = Head2Y
      ZOffset = Head2Z
      CurrentAxis = Head2Axis
   end
end

function OnSpindleChanged()
   if (spindleSpeed <= 0) then
      post.Warning("WARNING: Spindle speed is zero")
   end
end

function OnNewPart()
   post.Text(" (Part: ",partName,")\n");
end


function OnFloodOn()
   post.Text(" M08 (Flood coolant on)\n")
end

function OnMistOn()
   post.Text(" M07 (Mist coolant on)\n")
end

function OnCoolantOff()
   post.Text(" M09 (Coolant off)\n")
end

function OnDrill()
   OnRapid()
   depth = drillStart
   buffer = plungeSafety
   endZ = depth + buffer
   OnRapid()
   if(drillRetract < buffer) then
     buffer = drillRetract
   end
   while depth > drillZ do
      OnRapid()
      depth = depth - drillPeck
      if (depth < drillZ) then
         depth = drillZ
      end
      endZ = depth
      OnMove()
      if (depth > drillZ) then --retract if we need to take another bite
         endZ = endZ + drillRetract
         if (endZ > safeZ) then
            endZ = safeZ
         end
         OnRapid()
      end
      endZ = depth + buffer
   end
   if (endZ < safeZ) then
      endZ = safeZ
      OnRapid()
   end
end

function OnSetFeed()
end

function OnTapStart()
   post.Text(" M49\n") --disable FRO
   post.Text(" G95\n") --feed per rev
end

function OnAutoTap()
   clearance = 1 --tapping clearance height

--move to hole X,Y coordinates
   OnRapid()

--move to tapping clearance height
   clearance = clearance + drillStart
   endZ = clearance
   OnRapid()

--feed to depth
   feedRate = tapPitch * underFeed
   OnSetFeed()
   endZ = drillZ
   OnMove()

--retract to engage reverse clutch
   endZ = drillZ + tapTravel
   feedRate = 10000
   OnMove()

--feed out
   feedRate = tapPitch * reverseMult * underFeed
   endZ = tapTravel + clearance
   OnMove()

--retract to clearance plane
   endZ = safeZ
   OnRapid()

end

function OnRigidTap()
   clearance = 1 --tapping clearance height

   spindlecache = spindleSpeed

--spindle forwards
   if(spindleDir == 1) then
      OnSpindleCW()
   else
      OnSpindleCCW()
   end


--move to hole X,Y coordinates
   OnRapid()

--move to tapping clearance height
   endZ = clearance + drillStart
   OnRapid()

--tap to depth, correcting for underfeed
   feedRate = tapPitch * underFeed
   OnSetFeed()
   depthfix = (drillStart - drillZ) * (1 - underFeed)
   endZ = drillZ + depthfix
   OnMove()

--reverse spindle
   OnSpindleOff()
   spindleSpeed = spindlecache * reverseMult
   if(spindleDir == -1) then
      OnSpindleCW()
   else
      OnSpindleCCW()
   end

--feed out
   feedRate = tapPitch * reverseMult * underFeed
   OnSetFeed()
   endZ = clearance + drillStart
   OnMove()

--stop spindle and restore speed to tapping speed
   OnSpindleOff()
   spindleSpeed = spindlecache


--retract to clearance plane
   endZ = safeZ
   OnRapid() --retract to clearance plane

end


function OnTapEnd()
   post.Text(" M48\n") --enable FRO
   post.Text(" G94\n") --feed per min
end
