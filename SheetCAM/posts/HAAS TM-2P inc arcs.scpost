function OnAbout(event)
   ctrl = event:GetTextCtrl()
   ctrl:AppendText("HAAS TM-2P post processor\n")
   ctrl:AppendText("\n")
   ctrl:AppendText("Non modal G-codes\n")
   ctrl:AppendText("Modal coordinates\n")
   ctrl:AppendText("Comments enclosed with ( and )\n")
   ctrl:AppendText("Incremental IJ\n")
   ctrl:AppendText("uses G43 tool length offsets\n")
end


-- Revision 18/09/09 Added tapping

--created 20/10/08
--based on HAAS VF3.post

post.DefineCustomOption("Program number","progNumber",sc.unit0DECPLACE,0,99)


function OnInit()
   lineNumber = 10
   post.ShowCustomOptions();
   nonumbers = true
   post.Text("%\n")
   post.Text("O")
   post.Number(progNumber, "00000")
   post.Text("\n")
   post.TextDirect("\n")
   post.SetCommentChars ("()", "[]")  --make sure ( and ) characters do not appear in system text
   post.Text ("(Filename: ", fileName, ")\n")
   post.Text ("(Post processor: ", postName, ")\n")
   post.Text ("(Date: ", date, ")\n")
   post.TextDirect("\n")
   nonumbers = nil
   if(scale == metric) then
      post.Text (" G21 (Units: Metric)\n") --metric mode
      numFormat = "0.000"
   else
      post.Text (" G20 (Units: Inches)\n") --inch mode
      numFormat = "0.0000"
   end
   post.Text (" G40\n G90\n")
   bigarcs = 1 --stitch arc segments together
   minArcSize = 0.05 --arcs smaller than this are converted to moves
end

function OnNewLine()
   if nonumbers then return end
   post.Text ("N")
   post.Number (lineNumber, "0000")
   lineNumber = lineNumber + 10
end


function OnFinish()
   post.Text (" (PARKING)\n M09\n G00 G90 G53 Z0.\n G53 G90 G00 X-18.\n G28 G91 G00 Y0.1\n M30\n")
   nonumbers = true
   post.Text("%\n")
end

function OnRapid()
   post.ModalText (" G00")
   post.ModalNumber (" X", endX * scale, numFormat)
   post.ModalNumber (" Y", endY * scale, numFormat)
   post.ModalNumber (" Z", (endZ + toolOffset) * scale, numFormat)
   post.Eol()
end

function OnMove()
   post.ModalText (" G01")
   post.ModalNumber (" X", endX * scale, numFormat)
   post.ModalNumber (" Y", endY * scale, numFormat)
   post.ModalNumber (" Z", (endZ + toolOffset) * scale, numFormat)
   post.ModalNumber (" F", feedRate * scale, "0.###")
   post.ModalNumber (" S", spindleSpeed, "0.##")
   post.Eol()
end

function OnArc()
   if(arcAngle <0) then
      post.ModalText (" G03")
   else
      post.ModalText (" G02")
   end
   post.NonModalNumber (" X", endX * scale, numFormat)
   post.NonModalNumber (" Y", endY * scale, numFormat)
   post.ModalNumber (" Z", (endZ + toolOffset) * scale, numFormat)
   post.Text (" I")
   post.Number ((arcCentreX - currentX) * scale, numFormat)
   post.Text (" J")
   post.Number ((arcCentreY - currentY) * scale, numFormat)
   post.ModalNumber (" F", feedRate * scale, "0.0###")
   post.ModalNumber (" S", spindleSpeed, "0.##")
   post.Eol()
end


function OnSpindleCW()
   post.Text (" M03")
   post.ModalNumber (" S", spindleSpeed, "0.##")
   post.Eol()
end

function OnSpindleCCW()
   post.Text (" M04")
   post.ModalNumber (" S", spindleSpeed, "0.##")
   post.Eol()
end

function OnSpindleOff()
   post.Text (" M05\n")
end


function OnNewOperation()
   post.Text (" (Operation: ", operationName, ")\n")
   if (plungeRate <= 0) then
      post.Warning("WARNING: Plunge rate is zero")
   end
   if (feedRate <= 0) then
      post.Warning("WARNING: Feed rate is zero")
   end
end

function OnComment()
  post.Text(" (",commentText,")\n")
end

function OnToolChange()
   post.Text (" M6 T")
   post.Number (tool, "0")
   post.Text ("  (", toolName, ")\n")
   post.Text (" G43 H")
   post.Number (tool, "0")
   post.Eol()
end

function OnSpindleChanged()
   if (spindleSpeed <= 0) then
      post.Warning("WARNING: Spindle speed is zero")
   end
end

function OnNewPart()
   post.Text(" (Part: ",partName,")\n");
end


function OnFloodOn()
   post.Text(" M08 (Flood coolant on)\n")
end

function OnMistOn()
   post.Text(" M07 (Mist coolant on)\n")
end

function OnCoolantOff()
   post.Text(" M09 (Coolant off)\n")
end

function OnDrill()
   OnRapid()
   depth = drillStart
   buffer = plungeSafety
   endZ = depth + buffer
   OnRapid()
   if(drillRetract < buffer) then
     buffer = drillRetract
   end
   while depth > drillZ do
      OnRapid()
      depth = depth - drillPeck
      if (depth < drillZ) then
         depth = drillZ
      end
      endZ = depth
      OnMove()
      if (depth > drillZ) then --retract if we need to take another bite
         endZ = endZ + drillRetract
         if (endZ > safeZ) then
            endZ = safeZ
         end
         OnRapid()
      end
      endZ = depth + buffer
   end
   if (endZ < safeZ) then
      endZ = safeZ
      OnRapid()
   end
end


function OnSetFeed()
end

function OnTapStart()
--   post.Text(" M49\n") --disable FRO
   post.Text(" G95\n") --feed per rev
end

function OnAutoTap()
   clearance = 1 --tapping clearance height

--move to hole X,Y coordinates
   OnRapid()

--move to tapping clearance height
   clearance = clearance + drillStart
   endZ = clearance
   OnRapid()

--feed to depth
   feedRate = tapPitch * underFeed
   OnSetFeed()
   endZ = drillZ
   OnMove()

--retract to engage reverse clutch
   endZ = drillZ + tapTravel
   feedRate = 10000
   OnMove()

--feed out
   feedRate = tapPitch * reverseMult * underFeed
   endZ = tapTravel + clearance
   OnMove()

--retract to clearance plane
   endZ = safeZ
   OnRapid()

end

function OnRigidTap()
   post.ModalText(" G84")
   post.ModalNumber (" X", endX * scale, "0.0000")
   post.ModalNumber (" Y", endY * scale, "0.0000")
   post.ModalNumber (" Z", drillZ * scale, "0.0000")
   post.ModalNumber (" R", safeZ * scale, "0.0000")
   post.Text(" J")
   post.Number(reverseMult + 0.5 , "0")
   post.ModalNumber(" F", tapPitch * scale, "0.0000")
   post.Eol();
end


function OnTapEnd()
--   post.Text(" M48\n") --enable FRO
   post.Text(" G94\n") --feed per min
end
