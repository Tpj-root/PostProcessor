function OnAbout(event)
   ctrl = event:GetTextCtrl()
end

function OnAbout(event)
   ctrl = event:GetTextCtrl()
   ctrl:AppendText("Fanuc milling post processor\n")
   ctrl:AppendText("\n")
   ctrl:AppendText("Non modal G-codes\n")
   ctrl:AppendText("Modal coordinates\n")
   ctrl:AppendText("Comments enclosed with ( and )\n")
   ctrl:AppendText("Incremental IJ\n")
   ctrl:AppendText("uses G43 tool length offsets\n")
end


function OnInit()
   OnNewLine = nil
   post.Text("%\n")
   post.SetCommentChars ("()abcdefghijklmnopqrstuvwxyz", "[]ABCDEFGHIJKLMNOPQRSTUVWXYZ")  --make sure ( and ) characters do not appear in system text 
   post.Text (" (FILENAME, ", string.upper(fileName), ")\n") 
   post.Text (" (POST PROCESSOR, ", string.upper(postName), ")\n")
   post.Text(" (DATE,",date," TIME ",time,")\n")
   OnNewLine = OnNewLine2
   if(scale == metric) then
      post.Text (" G21 (UNITS, METRIC)\n") --metric mode
   else
      post.Text (" G20 (UNITS, INCHES)\n") --inch mode
   end
   post.Text (" G00 G17 G28 G40 G80 G91 G94 D0 Z0 M05 M09\n G28 Y0\n G90\n")
   bigArcs = 1 --stitch arc segments together
   minArcSize = 0.05 --arcs smaller than this are converted to moves
end

function OnNewLine()
   post.Text ("N")
   post.Number (lineNumber, "0000")
   lineNumber = lineNumber + 10
end


function OnFinish()
   post.Text (" G0 G91 G28 Z0 Y0\n")
   post.Text (" G90\n")
   post.Text (" M30\n")
   OnNewLine = nil
   post.Text("%\n")
end


function OnRapid()
   post.ModalText (" G00")
   post.ModalNumber (" X", endX * scale, "0.0###")
   post.ModalNumber (" Y", endY * scale, "0.0###")
   post.ModalNumber (" Z", (endZ + toolOffset) * scale, "0.0###")
   post.Eol()
   firstMove = true
end

function OnMove()
   if(toolClass == "ThreadMillTool" and firstMove) then
      post.Text(" G01 G41 D")
      post.Number(tool, "0")
   else
      post.ModalText (" G01")
   end
   firstMove = false;
   post.ModalNumber (" X", endX * scale, "0.0###")
   post.ModalNumber (" Y", endY * scale, "0.0###")
   post.ModalNumber (" Z", (endZ + toolOffset) * scale, "0.0###")
   post.ModalNumber (" F", feedRate * scale, "0.0###")
   post.Eol()
end

function OnArc()
   if(toolClass == "ThreadMillTool" and firstMove) then
      OnMove()
   end
   firstMove = false;
   if(arcAngle <0) then
      post.ModalText (" G03")
   else
      post.ModalText (" G02")
   end
   post.NonModalNumber (" X", endX * scale, "0.0###")
   post.NonModalNumber (" Y", endY * scale, "0.0###")
   post.ModalNumber (" Z", (endZ + toolOffset) * scale, "0.0###")
   post.Text (" I")
   post.Number ((arcCentreX - currentX) * scale, "0.0###")
   post.Text (" J")
   post.Number ((arcCentreY - currentY) * scale, "0.0###")
   post.ModalNumber (" F", feedRate * scale, "0.0###")
   post.Eol()
end


function OnSpindleCW()
   post.ModalNumber (" S", spindleSpeed, "0.##")
   post.Text (" M03")
   post.Eol()
end

function OnSpindleCCW()
   post.ModalNumber (" S", spindleSpeed, "0.##")
   post.Text (" M04")
   post.Eol()
end

function OnSpindleOff()
   post.Text (" M05\n")
end


function OnNewOperation()
   post.Text (" (OPERATION, ", operationName, ")\n")
end

function OnComment()
  post.Text(" (",commentText,")\n")
end

function OnToolChange()
   post.Text (" (", toolName, ")\n")
   post.Text (" T")
   post.Number (tool, "0")
   post.Text (" M06\n")
   post.Text(" G0 G90 G43 M03 Z1. H")
   post.Number (tool, "0")
   post.Eol()
   if (plungeRate <= 0) then
      post.Warning("WARNING: Plunge rate is zero")
   end
   if (feedRate <= 0) then
      post.Warning("WARNING: Feed rate is zero")
   end
end

function OnSpindleChanged()
   post.ModalNumber (" S", spindleSpeed, "0.##")
   if (spindleSpeed <= 0) then
      post.Warning("WARNING: Spindle speed is zero")
   end
end

function OnNewPart()
   post.Text(" (PART, ",partName,")\n");
end


function OnFloodOn()
   post.Text(" M08 (COOLANT ON)\n")
end

function OnMistOn()
   post.Text(" M07 (THRU SPINDLE COOLANT ON)\n")
end

function OnCoolantOff()
   post.Text(" M09 (COOLANT OFF)\n")
end

function OnDrill()
   OnRapid()
   depth = drillStart
   buffer = plungeSafety
   endZ = depth + buffer
   OnRapid()
   if(drillRetract < buffer) then
     buffer = drillRetract
   end
   while depth > drillZ do
      OnRapid()
      depth = depth - drillPeck
      if (depth < drillZ) then
         depth = drillZ
      end
      endZ = depth
      OnMove()
      if (depth > drillZ) then --retract if we need to take another bite
         endZ = endZ + drillRetract
         if (endZ > safeZ) then
            endZ = safeZ
         end
         OnRapid()
         endZ = depth + buffer
      end
   end
   if (endZ < safeZ) then
      endZ = safeZ
      OnRapid()
   end
end

function OnSetFeed()
end

function OnTapStart()
   post.Text(" G40\n") --disable FRO
   post.Text(" G94\n") --feed per min
end

function OnAutoTap()
   clearance = 2.54 --tapping clearance height

--move to hole X,Y coordinates
   OnRapid()

--move to tapping clearance height
   clearance = clearance + drillStart
   endZ = clearance
   OnRapid()

--feed to depth
   feedRate = tapPitch * underFeed * spindleSpeed
   OnSetFeed()
   endZ = drillZ
   OnMove()

--retract to engage reverse clutch
   endZ = drillZ + tapTravel
   feedRate = 10000
   OnMove()

--feed out
   feedRate = tapPitch * reverseMult * underFeed * spindleSpeed
   endZ = tapTravel + clearance
   OnMove()

--retract to clearance plane
   endZ = safeZ
   OnRapid()

end

function OnRigidTap()
   clearance = 2.54 --tapping clearance height

--spindle forwards
   if (spindleDir == 1) then
      OnSpindleCW()
   else
      OnSpindleCCW()
   end
   spindlecache = spindleSpeed

--move to hole X,Y coordinates
   OnRapid()

--move to tapping clearance height
   endZ = clearance + drillStart
   OnRapid()

--tap to depth, correcting for underfeed
   feedRate = tapPitch * underFeed * spindleSpeed
   OnSetFeed()
   depthfix = (drillStart - drillZ) * (1 - underFeed)
   endZ = drillZ + depthfix
   OnMove()

--reverse spindle
   OnSpindleOff()
   spindleSpeed = spindlecache * reverseMult
   if(spindleDir == -1) then
      OnSpindleCW()
   else
      OnSpindleCCW()
   end

--feed out
   feedRate = tapPitch * reverseMult * underFeed * spindleSpeed
   OnSetFeed()
   endZ = clearance + drillStart
   OnMove()

--stop spindle and restore speed to tapping speed
   OnSpindleOff()
   spindleSpeed = spindlecache


--retract to clearance plane
   endZ = safeZ
   OnRapid() --retract to clearance plane

end


function OnTapEnd()
   post.Text(" G80\n") --enable FRO
   post.Text(" M09\n") --feed per min
end
