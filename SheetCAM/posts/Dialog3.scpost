function OnAbout(event)
   ctrl = event:GetTextCtrl()
   ctrl:AppendText("G-code post processor for Deckel Dialog 3\n")
   ctrl:AppendText("No comments\n")
   ctrl:AppendText("Incremental IJ\n")
end


--  Created 2008-09-10
--  based on minimum g-code_non_modal.post

function OnNewLine()
   if nolines then return end
   lineNumber = lineNumber + 1
   post.Text ("N")
   post.Number (lineNumber, "0000")
end

function OnInit()
   current_feedRate=0
   nolines = true;
   post.SetCommentChars ("()", "[]")  --make sure ( and ) characters do not appear in system 1text
--[[   if(scale == metric) then
     post.Text ("&%11\n") --metric mode, program number

     post.Text ("%\n")
     post.Text ("(&%11 /000000)\n") -- program number
   else
     post.Text ("$%10\n") --imperial mode
     post.Text ("%\n")
     post.Text ("($%10 /000000)\n") -- program number
   end
   post.Text (" G64\n") -- smooth transitions (as opposed to G60, exact stop)
   ]]
   feedScale = scale
   scale = scale * 1000
   format = "+0"
   post.Text("&P01\n%\n(&P01/0000)\n");
   nolines = false;
   bigArcs = 1 --stitch arc segments together
   minArcSize = 0.05 --arcs smaller than this are converted to moves
end

function OnFinish()
   post.Text (" M30\n")
   nolines = true;
   post.Text ("?\n")
   post.Text ("0000\n")
end


function OnRapid()
   post.Text (" G00")
   post.ModalNumber (" X", endX * scale, format)
   post.ModalNumber (" Y", endY * scale, format)
   post.ModalNumber (" Z", (endZ + toolOffset) * scale, format)
   post.Eol()
end

function OnMove()
   OnSetFeed()
   post.Text (" G01")
   post.ModalNumber (" X", endX * scale, format)
   post.ModalNumber (" Y", endY * scale, format)
   post.ModalNumber (" Z", (endZ + toolOffset) * scale, format)
   post.Eol()
end

function OnArc()
function OnArc()
   OnSetFeed()
   if(arcAngle <0) then
      post.Text (" G03")
   else
      post.Text (" G02")
   end
   post.ModalNumber (" X", endX * scale, format)
   post.ModalNumber (" Y", endY * scale, format)
   post.ModalNumber (" Z", (endZ + toolOffset) * scale, format)
   post.Text (" I")
   post.Number ((arcCentreX - currentX) * scale, format)
   post.Text (" J")
   post.Number ((arcCentreY - currentY) * scale, format)
   post.Eol()
end


function OnSpindleCW()
--   text (" M03")
--   eol()
end

function OnSpindleCCW()
--   text (" M4")
--   eol()
end

function OnSpindleOff()
--   text (" M5\n")
end


function OnNewOperation()

end

function OnToolChange()
   StoreFeedrate=current_feedRate
--   post.Text (" T0\n") -- cancel tool length offset
--   endZ=99 -- has to be different from 100 due to bug in sheetcam
--   OnRapid()
--   post.Text (" G00 Z50 M7 S+0\n") -- make room for tool change
   post.Text (" T")
   post.Number (tool, "0")
   post.Eol()
   post.NonModalNumber (" S", spindleSpeed, "+0")
   post.Eol()
--   feedRate=900
--   OnSetFeed()
--   endZ=50
--   OnMove()
--   feedRate=StoreFeedrate
--   OnSetFeed()
end

function OnSpindleChanged()
   if (spindleSpeed <= 0) then
      post.Warning("WARNING: Spindle speed is zero")
   end
end

function OnNewPart()
end

function OnFloodOn()
   post.Text(" M08\n")
end

function OnMistOn()
   post.Text(" M08\n")   -- no specific command for mist
end

function OnCoolantOff()
   post.Text(" M09\n")
end

function OnDrill()
   endZ=50
   OnRapid()
   depth = drillStart
   buffer = plungeSafety
   if(drillRetract < buffer) then
     buffer = drillRetract
  end
   while depth > drillZ do
      endZ = depth + buffer
      OnRapid()
      depth = depth - drillPeck
      if (depth < drillZ) then
         depth = drillZ
      end
      endZ = depth
      OnMove()
      if (depth > drillZ) then --retract if we need to take another bite
         endZ = endZ + drillRetract
         if (endZ > safeZ) then
            endZ = safeZ
         end
         OnRapid()
      end
   end
   if (endZ < safeZ) then
      endZ = safeZ
      OnRapid()
   end
end

function OnSetFeed()
   if ((current_feedRate>feedRate) or (current_feedRate<feedRate)) then
     post.NonModalNumber (" F", feedRate * feedScale, "0")
     post.Eol()
   end
   current_feedRate=feedRate
end

function OnTapStart()
--   text(" M49\n") --disable FRO
--   text(" G95\n") --feed per rev
end

function OnAutoTap()
   clearance = 1 --tapping clearance height

--move to hole X,Y coordinates
   OnRapid()

--move to tapping clearance height
   clearance = clearance + drillStart
   endZ = clearance
   OnRapid()

--feed to depth
   feedRate = tapPitch * underFeed
   OnSetFeed()
   endZ = drillZ
   OnMove()

--retract to engage reverse clutch
   endZ = drillZ + tapTravel
   feedRate = 10000
   OnMove()

--feed out
   feedRate = tapPitch * reverseMult * underFeed
   endZ = tapTravel + clearance
   OnMove()

--retract to clearance plane
   endZ = safeZ
   OnRapid()

end

function OnRigidTap()
   OnRapid()
   clearance = 1 --tapping clearance height

   spindlecache = spindleSpeed
   feedRate = tapPitch*spindleSpeed
   current_feedRate=feedRate
   endZ=clearance + drillStart + toolOffset
   OnRapid()
   post.Text (" G84")
   post.NonModalNumber (" F", feedRate * feedScale, "0")
   post.NonModalNumber (" S", spindleSpeed, "+0")
   post.NonModalNumber (" Z", (drillZ + toolOffset) * scale, format)
   post.NonModalNumber (" Z", (clearance + drillStart + toolOffset) * scale, format)
   post.Eol()
   endZ = safeZ
   OnRapid()

end


function OnTapEnd()
--   text(" M48\n") --enable FRO
--   text(" G94\n") --feed per min
end
