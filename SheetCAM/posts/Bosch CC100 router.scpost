function OnAbout(event)
   ctrl = event:GetTextCtrl()
   ctrl:AppendText("Bosch CC100 router post processor\n")
   ctrl:AppendText("\n")
   ctrl:AppendText("Non modal G-codes\n")
   ctrl:AppendText("No comments\n")
   ctrl:AppendText("Absolute IJ\n")
   ctrl:AppendText("Tools 0-99 are head 1, tools 100-199 are head 2\n")
end



post.DefineCustomOption("Program number","progNumber",sc.unit0DECPLACE,0,99)

function OnInit()
   post.ShowCustomOptions();
   line = 1
   post.TextDirect("\18\2\n")
   
   file = fileNameOnly:gsub(" ", "-")
   file = file:sub(1,16)
   while file:len() < 16 do
      file = file .. " "
   end
   
   prog = string.format("%i",progNumber)
   prog = prog:sub(1,2)
   while prog:len() < 2 do
      prog = " " .. prog
   end
   post.TextDirect("   PROGRAM   ", prog, "   ", file, "  ")
   if(scale == metric) then
      post.TextDirect("M")
   else
      post.TextDirect("I")
   end
   
   post.TextDirect("  RWED   4               \n")
   post.Text ("G801\n")
   post.Text ("G92 X0.0 Y0.0\nG90\nG17\nG40\n")
   bigarcs = 1 --stitch arc segments together
   minArcSize = 0.05 --arcs smaller than this are converted to moves
end

function OnNewLine()
   local ln = " N " .. line
   while ln:len() < 8 do
      ln = ln .. " "
   end
   post.Text(ln)
   line = line + 1
end


function OnFinish()
   endX = 0
   endY = 0
   OnRapid()
   post.Text ("M30\n")
   post.TextDirect ("        \3\n\4\n\20\n\n");
end

function OnRapid()
   post.Text ("G0")
   post.ModalNumber (" X", endX * scale, "0.0###")
   post.ModalNumber (" Y", endY * scale, "0.0###")
   post.ModalNumber (" Z", endZ * scale, "0.0###")
   post.Eol()
end

function OnMove()
   post.Text ("G1")
   post.ModalNumber (" X", endX * scale, "0.0###")
   post.ModalNumber (" Y", endY * scale, "0.0###")
   post.ModalNumber (" Z", endZ * scale, "0.0###")
   post.ModalNumber (" F", feedRate * scale, "0.0###")
   post.Eol()
end

function OnArc()
   if(endZ ~= currentZ) then
      post.ArcAsMoves(0.1)
      return
   end
   if(arcAngle <0) then
      post.Text ("G3")
   else
      post.Text ("G2")
   end
   post.NonModalNumber (" X", endX * scale, "0.0###")
   post.NonModalNumber (" Y", endY * scale, "0.0###")
   post.Text (" I")
   post.Number (arcCentreX * scale, "0.0###")
   post.Text (" J")
   post.Number (arcCentreY * scale, "0.0###")
   post.ModalNumber (" F", feedRate * scale, "0.0###")
   post.Eol()
end



function OnNewOperation()

end

function OnComment()
  post.Text("(",commentText,")\n")
end

function OnSpindleChanged()

end

function OnSpindleCW()
   post.Text ("M3\n")
   post.ModalNumber ("S", spindleSpeed, "0.##")
   if(tool >= 100) then
      post.Text(" M23\n")
   else
      post.Text(" M23\n")
   end
   post.Text("G04 F4\n")
end

function OnSpindleCCW()
   post.Text ("M04")
   post.ModalNumber ("S", spindleSpeed, "0.##")
   if(tool >= 100) then
      post.Text(" M24\n")
   else
      post.Text(" M24\n")
   end
   post.Text("G04 F4\n")
end

function OnSpindleOff()
   post.Text ("M5\n")
   post.Text ("M50\n")
end


function OnToolChange()
   local hd
   local tl
   hd, tl = math.modf(tool / 100)
   if(hd == 0) then
      post.Text("M31\n")
   else
      post.Text("M32\n")
   end
   tl = tl * 100
   post.Text ("T")
   post.Number (tl, "00")
   post.Number (tl, "00")
   post.Text ("\n")
end

function OnNewPart()
--   post.Text("[Part: ",partName,"]\n");
end

function OnDrill()
   OnRapid()
   depth = drillStart
   buffer = plungeSafety
   endZ = depth + buffer
   OnRapid()
   if(drillRetract < buffer) then
     buffer = drillRetract
   end
   while depth > drillZ do
      OnRapid()
      depth = depth - drillPeck
      if (depth < drillZ) then
         depth = drillZ
      end
      endZ = depth
      OnMove()
      if (depth > drillZ) then --retract if we need to take another bite
         endZ = endZ + drillRetract
         if (endZ > safeZ) then
            endZ = safeZ
         end
         OnRapid()
         endZ = depth + buffer
      end
   end
   if (endZ < safeZ) then
      endZ = safeZ
      OnRapid()
   end
end
