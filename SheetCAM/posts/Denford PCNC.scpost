function OnAbout(event)
   ctrl = event:GetTextCtrl()
   ctrl:AppendText("Denford PCNC post processor\n")
   ctrl:AppendText("\n")
   ctrl:AppendText("Non modal G-codes\n")
   ctrl:AppendText("Modal coordinates\n")
   ctrl:AppendText("No comments\n")
   ctrl:AppendText("Absolute arc centres\n")
   ctrl:AppendText("G-codes used:\n")
   ctrl:AppendText("G00,G01,G02,G03,G20,G21\n")
   ctrl:AppendText("M-codes used:\n")
   ctrl:AppendText("M03,M04,M05,M07,M08,M09\n")
end



--  revision 16/2/07
--  break arcs into quadrants

--   revision 26/2/07
--   Removed safety move in finish() event. This is now handled internally

--   Created 6/11/2006
--   based on Mach2.post


function OnInit()
   lineNumber = 10
   post.SetCommentChars ("()", "[]")  --make sure ( and ) characters do not appear in system text
--   if(scale == metric) then
--      text (" G21\n") --metric mode
--   else
--      text (" G20\n") --inch mode
--   end
--   text (" G40 G90\n F1\n")
   bigarcs = 1 --stitch arc segments together
   minArcSize = 0.05 --arcs smaller than this are converted to moves
end

function OnNewLine()
   post.Text ("N")
   post.Number (lineNumber, "0000")
   lineNumber = lineNumber + 10
end


function OnFinish()
   post.Text (" M05\n")
end

function OnRapid()
   post.Text (" G00")
   post.ModalNumber (" X", endX * scale, "0.0000")
   post.ModalNumber (" Y", endY * scale, "0.0000")
   post.ModalNumber (" Z", (endZ + toolOffset) * scale, "0.0000")
   post.Eol()
end

function OnMove()
   post.Text (" G01")
   post.ModalNumber (" X", endX * scale, "0.0000")
   post.ModalNumber (" Y", endY * scale, "0.0000")
   post.ModalNumber (" Z", (endZ + toolOffset) * scale, "0.0000")
   post.NonModalNumber (" F", feedRate * scale, "0.###")
   post.ModalNumber (" S", spindleSpeed, "0.##")
   post.Eol()
end

function OnArc()
   if(math.abs(endZ - currentZ) > 0.001) then
      post.ArcAsMoves(0.05)
      return
   end

   halfpi = math.pi/2

   difx = currentX - arcCentreX
   dify = currentY - arcCentreY

   radius = math.hypot(difx,dify)
   startangle = math.atan2(difx,dify)
   endangle = startangle + arcAngle
   if(arcAngle > 0) then
      quad = (math.toint((startangle / halfpi) + 10) - 10) * halfpi
      repeat
         quad = quad + halfpi
         if(quad > endangle) then
            doarc(endangle)
         else
            doarc(quad)
         end
      until(quad >= endangle)
   else
      quad = -(math.toint((-startangle / halfpi) + 10) - 10) * halfpi
      repeat
         quad = quad - halfpi
         if(quad < endangle) then
            doarc(endangle)
         else
            doarc(quad)
         end
      until(quad <= endangle)
   end
end

function doarc(angle)
   if(arcAngle <0) then
      post.Text (" G03")
   else
      post.Text (" G02")
   end
   post.NonModalNumber (" X", ((math.sin(angle) * radius) + arcCentreX) * scale, "0.0000")
   post.NonModalNumber (" Y", ((math.cos(angle) * radius) + arcCentreY) * scale, "0.0000")
   post.NonModalNumber (" CX",(arcCentreX) * scale, "0.0000")
   post.NonModalNumber (" CY",(arcCentreY) * scale, "0.0000")
   post.NonModalNumber (" F", feedRate * scale, "0.0###")
   post.Eol()
end


function OnSpindleCW()
   post.Text (" M03")
--   modalnumber (" S", spindlespeed, "0.##")
   post.Eol()
end

function OnSpindleCCW()
   post.Text (" M04")
--   modalnumber (" S", spindlespeed, "0.##")
   post.Eol()
end

function OnSpindleOff()
   post.Text (" M05\n")
end


function OnNewOperation()
   if (plungeRate <= 0) then
      post.Warning("WARNING: Plunge rate is zero")
   end
   if (feedRate <= 0) then
      post.Warning("WARNING: Feed rate is zero")
   end
end

function OnToolChange()
   post.Text (" M6 T")
   post.Number (tool, "0")
   post.Eol()
end

function OnSpindleChanged()
   if (spindleSpeed <= 0) then
      post.Warning("WARNING: Spindle speed is zero")
   end
end

function OnNewPart()
end


function OnFloodOn()
   post.Text(" M08\n")
end

function OnMistOn()
   post.Text(" M07\n")
end

function OnCoolantOff()
   post.Text(" M09\n")
end

function OnDrill()
   OnRapid()
   depth = drillStart
   buffer = plungeSafety
   endZ = depth + buffer
   OnRapid()
   if(drillRetract < buffer) then
     buffer = drillRetract
   end
   while depth > drillZ do
      OnRapid()
      depth = depth - drillPeck
      if (depth < drillZ) then
         depth = drillZ
      end
      endZ = depth
      OnMove()
      if (depth > drillZ) then --retract if we need to take another bite
         endZ = endZ + drillRetract
         if (endZ > safeZ) then
            endZ = safeZ
         end
         OnRapid()
      end
      endZ = depth + buffer
   end
   if (endZ < safeZ) then
      endZ = safeZ
      OnRapid()
   end
end
