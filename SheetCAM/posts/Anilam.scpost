function OnAbout(event)
   ctrl = event:GetTextCtrl()
   ctrl:AppendText("Anilam post processor\n")
   ctrl:AppendText("\n")
   ctrl:AppendText("Modal G-codes and coordinates\n")
   ctrl:AppendText("No comments\n")
   ctrl:AppendText("No spindle speed control \n")
   ctrl:AppendText("Absolute IJ\n")
end


--  revision 3/2/07
--  Removed final safety move. This is now done in SheetCam

--   revision 7/10/05
--   Added new arc handling

--   revision 20/10/04
--   added tool length offsets

-- Modified from TurboCNC post 22/8/04
-- Removed G94 spindle speed 24/8/04


function OnInit()
   post.SetCommentChars ("();", "[]:")  --make sure ( and ) characters do not appear in system text
--   text (" ;Filename: ", filename, "\n")
--   text (" ;Post processor: ", postname, "\n")
--   text (" ;Date: ", date, "\n")
   if(scale == metric) then
--      text(" ;Units: Metric\n")
      post.Text (" G21\n") --metric mode
   else
--      text(" ;Units: Inches\n")
      post.Text (" G20\n") --inch mode
   end
   post.Text (" G17\n")  --XY plane
--   text (" G94\n")  --feed in units/min
   post.Text (" G90\n")  --absolute
   bigArcs = 1 --stitch arc segments together
   minArcSize = 0.05 --arcs smaller than this are converted to moves
end

function OnNewLine()
   post.Text ("N")
   post.Number (lineNumber, "0000")
   lineNumber = lineNumber + 10
end


function OnFinish()
   post.Text (" M05\n M30\n")
end

function OnRapid()
   post.Text (" G00")
   post.ModalNumber (" X", endX * scale, "0.0000")
   post.ModalNumber (" Y", endY * scale, "0.0000")
   post.ModalNumber (" Z", (endZ + toolOffset) * scale, "0.0000")
   post.Eol()
end

function OnMove()
   post.Text (" G01")
   post.ModalNumber (" X", endX * scale, "0.0000")
   post.ModalNumber (" Y", endY * scale, "0.0000")
   post.ModalNumber (" Z", (endZ + toolOffset) * scale, "0.0000")
   post.ModalNumber (" F", feedRate * scale, "0.######")
--   modalnumber (" S", spindlespeed, "0.##")
   post.Eol()
end

function OnArc()
   if(currentZ == endZ) then
      if(arcAngle <0) then
         post.Text (" G03")  --use circ moves
      else
         post.Text (" G02")  --use circ moves
      end
   else
      if(arcAngle <0) then
         post.Text (" G73")  --use helical moves
      else
         post.Text (" G72")  --use helical moves
      end
   end
   post.CancelModaltext()
   post.ModalNumber (" X", endX * scale, "0.0000")
   post.ModalNumber (" Y", endY * scale, "0.0000")
   post.ModalNumber (" Z", (endZ + toolOffset) * scale, "0.0000")
   post.Text (" I")
   post.Number (arcCentreX * scale, "0.0000")
   post.Text (" J")
   post.Number (arcCentreY * scale, "0.0000")
   post.ModalNumber (" F", feedRate * scale, "0.0###")
--   modalnumber (" S", spindlespeed, "0.##")
   post.Eol()
end


function OnSpindleCW()
--   text (" M03")
--   modalnumber (" S", spindlespeed, "0.##")
--   eol()
end

function OnSpindleCCW()
--   text (" M04")
--   modalnumber (" S", spindlespeed, "0.##")
--   eol()
end

function OnSpindleOff()
   post.Text (" M05\n")
end


function OnNewOperation()
--   text (" ;Operation: ", operationName, "\n")
   if (plungeRate <= 0) then
      post.Warning("WARNING: Plunge rate is zero")
   end
   if (feedRate <= 0) then
      post.Warning("WARNING: Feed rate is zero")
   end
end

function OnToolChange()
   post.Text (" T")
   post.Number (tool, "0")
   post.Eol()
--   text ("  ;", toolname, "\n")
end



function OnSpindleChanged()
--   if (spindlespeed <= 0) then
--      warning("WARNING: Spindle speed is zero")
--   end
end

function OnFloodOn()
   post.Text(" M08\n")
end

function OnMistOn()
   post.Text(" M07\n")
end

function OnCoolantOff()
   post.Text(" M09\n")
end

function OnDrill()
   OnRapid()
   depth = drillStart
   buffer = plungeSafety
   endZ = depth + buffer
   OnRapid()
   if(drillRetract < buffer) then
     buffer = drillRetract
   end
   while depth > drillZ do
      OnRapid()
      depth = depth - drillPeck
      if (depth < drillZ) then
         depth = drillZ
      end
      endZ = depth
      OnMove()
      if (depth > drillZ) then --retract if we need to take another bite
         endZ = endZ + drillRetract
         if (endZ > safeZ) then
            endZ = safeZ
         end
         OnRapid()
      end
      endZ = depth + buffer
   end
   if (endZ < safeZ) then
      endZ = safeZ
      OnRapid()
   end
end
