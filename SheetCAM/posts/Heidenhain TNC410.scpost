function OnAbout(event)
   ctrl = event:GetTextCtrl()
   ctrl:AppendText("Heidenhain TNC155 post processor\n")
   ctrl:AppendText("\n")
   ctrl:AppendText("Modal G-codes and coordinates\n")
   ctrl:AppendText("Uses G02/G03 for helical moves\n")
   ctrl:AppendText("No comments\n")
   ctrl:AppendText("Absolute IJ\n")
end


function OnInit()
   post.SetCommentChars ("();", "[]:")  --make sure ( and ) characters do not appear in system text
   nonumbers = 1
   lineNumber = 10
   post.Text("%" .. fileNameOnly)
   if(scale == metric) then
      post.Text (" G71 *\n") --metric mode
   else
      post.Text (" G70 *\n") --inch mode
   end
   nonumbers =0
   post.Text (" G17 G40 G90 *\n")  --absolute
   post.Text(" G30")
   post.NonModalNumber (" X", materialX1 * scale, "+0.0###")
   post.NonModalNumber (" Y", materialY1 * scale, "+0.0###")
   post.NonModalNumber (" Z", (-materialThick) * scale, "+0.0###")
   post.Text(" *\n")
   post.Text(" G31")
   post.NonModalNumber (" X", materialX2 * scale, "+0.0###")
   post.NonModalNumber (" Y", materialY2 * scale, "+0.0###")
   post.NonModalNumber (" Z", 0, "+0.0###")
   post.Text(" *\n")
   post.CancelModalNumbers()
   bigarcs = 1 --stitch arc segments together
   minArcSize = 0.05 --arcs smaller than this are converted to moves
end

function OnNewLine()
   if(nonumbers ==1) then return end
   post.Text ("N")
   post.Number (lineNumber, "0000")
   lineNumber = lineNumber + 10
end


function OnFinish()
   endZ = safeZ
   OnRapid()
   post.Text (" M05 M30 *\n")
end

function OnRapid()
   post.ModalText (" G00")
   post.ModalNumber (" X", endX * scale, "+0.0###")
   post.ModalNumber (" Y", endY * scale, "+0.0###")
   post.ModalNumber (" Z", (endZ + toolOffset) * scale, "+0.0###")
   post.Text(" *\n")
end

function OnMove()
   post.ModalText (" G01")
   post.ModalNumber (" X", endX * scale, "+0.0###")
   post.ModalNumber (" Y", endY * scale, "+0.0###")
   post.ModalNumber (" Z", (endZ + toolOffset) * scale, "0.0###")
   post.ModalNumber (" F", feedRate * scale, "0")
   post.ModalNumber (" S", spindleSpeed, "0.##")
   post.Text(" *\n")
end

function OnArc()
   if(endZ ~= currentZ) then --helical - done as moves
      post.ArcAsMoves(0.05)
      return
   end
   if(arcAngle <0) then
      post.ModalText (" G03")  --use circ moves
   else
      post.ModalText (" G02")  --use circ moves
   end
   post.ModalNumber (" X", endX * scale, "+0.0###")
   post.ModalNumber (" Y", endY * scale, "+0.0###")
--   modalnumber (" Z", (endz + tooloffset) * scale, "+0.0###")
   post.NonModalNumber (" I", arcCentreX * scale, "+0.0###")
   post.NonModalNumber (" J", arcCentreY * scale, "+0.0###")
   post.ModalNumber (" F", feedRate * scale, "0")
   post.ModalNumber (" S", spindleSpeed, "0.##")
   post.Text(" *\n")
end


function OnSpindleCW()
   post.Text (" M03")
   post.ModalNumber (" S", spindleSpeed, "0.##")
   post.Text(" *\n")
end

function OnSpindleCCW()
   post.Text (" M04")
   post.ModalNumber (" S", spindleSpeed, "0.##")
   post.Text(" *\n")
end

function OnSpindleOff()
   post.Text (" M05 *\n")
end


function OnNewOperation()
end

function OnToolChange()
   post.Text (" M06 T")
   post.Number (tool, "0")
end



function OnSpindleChanged()
   if (spindleSpeed <= 0) then
      post.Warning("WARNING: Spindle speed is zero")
   end
end

function OnFloodOn()
   post.Text(" M08 *\n")
end

function OnMistOn()
   post.Text(" M07 *\n")
end

function OnCoolantOff()
   post.Text(" M09 *\n")
end

function OnDrill()
   OnRapid()
   depth = drillStart
   buffer = plungeSafety
   endZ = depth + buffer
   OnRapid()
   if(drillRetract < buffer) then
     buffer = drillRetract
   end
   while depth > drillZ do
      OnRapid()
      depth = depth - drillPeck
      if (depth < drillZ) then
         depth = drillZ
      end
      endZ = depth
      OnMove()
      if (depth > drillZ) then --retract if we need to take another bite
         endZ = endZ + drillRetract
         if (endZ > safeZ) then
            endZ = safeZ
         end
         OnRapid()
      end
      endZ = depth + buffer
   end
   if (endZ < safeZ) then
      endZ = safeZ
      OnRapid()
   end
end

function OnAutoTap()
   clearance = 1 --tapping clearance height

--move to hole X,Y coordinates
   OnRapid()

--move to tapping clearance height
   clearance = clearance + drillStart
   endZ = clearance
   OnRapid()

--feed to depth
   feedRate = tapPitch * underFeed
   OnSetFeed()
   endZ = drillZ
   OnMove()

--retract to engage reverse clutch
   endZ = drillZ + tapTravel
   feedRate = 10000
   OnMove()

--feed out
   feedRate = tapPitch * reverseMult * underFeed
   endZ = tapTravel + clearance
   OnMove()

--retract to clearance plane
   endZ = safeZ
   OnRapid()

end

function OnRigidTap()
   OnRapid()
   post.ModalText (" G85")  --use circ moves
   post.Text(" P01 ")
   post.Number((safeZ - (drillStart + plungeSafety)) * scale, "0.0###")
   post.Text(" P02 ")
   post.Number(((-drillZ) + drillStart + plungeSafety) * scale, "0.0###")
   post.Text(" P02 ")
   post.Number((tapPitch) * scale, "0.0###")
   post.Text(" *\n")
end

