function OnAbout(event)
   ctrl = event:GetTextCtrl()
   ctrl:AppendText("Prototrak edge processor\n")
   ctrl:AppendText("\n")
   ctrl:AppendText("Uses Prototrak conversational code\n")
end



--   Created 21/11/2007



function OnInit()
   nolines = 1
   lineNumber = 1
   post.SetCommentChars ("()", "[]")  --make sure ( and ) characters do not appear in system text
   post.Text("PN0000000 ")
   if(scale == metric) then
      post.Text (" G21;\n") --metric mode
      format = "0.00"
      digitMul = 100
   else
      post.Text (" G20;\n") --inch mode
      format = "0.0000"
      digitMul = 10000
   end
   nolines = nil
   bigarcs = 1 --stitch arc segments together
   minArcSize = 0.05 --arcs smaller than this are converted to moves
   wasrapid = 1
   curFeed =0
end

function OnNewLine()
   if nolines then return end
   post.Text ("N")
   post.Number (lineNumber, "0")
   lineNumber = lineNumber + 1
end


function OnFinish()
   nolines = 1
   post.Text("%\n")
end

function OnRapid()
   wasrapid = 1
end

function OnMove()
   post.Text (" G101")
   donumber (" XB", currentX * scale)
   donumber (" YB", currentY * scale)
--   if(wasrapid) then
      donumber(" ZR", safeZ * scale)
--      wasrapid = nil
--   else
--      donumber(" ZR", 0)
--   end
   donumber (" ZB", currentZ * scale)
   donumber (" XE", endX * scale)
   donumber (" YE", endY * scale)
   donumber (" ZE", endZ * scale)
   post.Text(" TC0")
   post.NonModalNumber(" F",curFeed * scale,"0.0")
   post.NonModalNumber(" FZ",plungeRate * scale,"0.0")
   post.NonModalNumber(" D",0,format)
   post.NonModalNumber(" CR",0,format)
   post.NonModalNumber(" T",tool,"00")
   post.Text(";\n")
end

function OnArc()
   if(endX == currentX and endY == currentY) then --circle
      post.Text(" G109")
      donumber (" XC", arcCentreX * scale)
      donumber (" YC", arcCentreY * scale)
      donumber (" ZC", ((endZ + currentZ)/2) * scale)
      donumber (" R", math.hypot(endX - arcCentreX, endY - arcCentreY) * scale)
      if(arcAngle <0) then
         post.Text (" DR2")
      else
         post.Text (" DR1")
      end
      post.Text(" TC0 FC0.0")
      post.NonModalNumber(" F",curFeed * scale,"0.0")
      post.NonModalNumber(" T",tool,"00")
      post.NonModalNumber(" D",toolDia * scale,format)
      post.Text(";\n")
      return
   end


   if(arcAngle <0) then
      post.Text (" G103")
   else
      post.Text (" G102")
   end
   donumber (" XB", currentX * scale)
   donumber (" YB", currentY * scale)

--   if(wasrapid) then
      donumber(" ZR", safeZ * scale)
--      wasrapid = nil
--   else
--      donumber(" ZR", 0)
--   end
   donumber (" ZB", currentZ * scale)
   donumber (" XE", endX * scale)
   donumber (" YE", endY * scale)
   donumber (" ZE", endZ * scale)
   donumber (" XC", arcCentreX * scale)
   donumber (" YC", arcCentreY * scale)
   donumber (" ZC", ((endZ + currentZ)/2) * scale)
   post.Text(" TC0")
   post.NonModalNumber(" F",curFeed * scale,"0.0")
   post.NonModalNumber(" FZ",plungeRate * scale,"0.0")
   post.NonModalNumber(" D",0,format)
   post.NonModalNumber(" CR",0,format)
   post.NonModalNumber(" T",tool,"00")
   post.Text(";\n")
end

function donumber(txt,num)
   post.Text(txt)
   if(num >= 0) then
      post.Text("+")
   end
   num = math.toint(num * digitMul)/digitMul
   post.Number(num,format)
--   if(num == 0) then
--      text("I")
--   else
      post.Text("A")
--   end
end


function OnSpindleCW()
end

function OnSpindleCCW()
end

function OnSpindleOff()
end


function OnNewOperation()
   curFeed = feedRate
   if (plungeRate <= 0) then
      post.Warning("WARNING: Plunge rate is zero")
   end
   if (feedRate <= 0) then
      post.Warning("WARNING: Feed rate is zero")
   end
end

function OnComment()
end

function OnToolChange()

end

function OnSpindleChanged()
end

function OnNewPart()
end


function OnFloodOn()
end

function OnMistOn()
end

function OnCoolantOff()
end

function OnDrill()
   OnRapid()
   depth = drillStart
   buffer = plungeSafety
   endZ = depth + buffer
   OnRapid()
   if(drillRetract < buffer) then
     buffer = drillRetract
   end
   while depth > drillZ do
      OnRapid()
      depth = depth - drillPeck
      if (depth < drillZ) then
         depth = drillZ
      end
      endZ = depth
      OnMove()
      if (depth > drillZ) then --retract if we need to take another bite
         endZ = endZ + drillRetract
         if (endZ > safeZ) then
            endZ = safeZ
         end
         OnRapid()
      end
      endZ = depth + buffer
   end
   if (endZ < safeZ) then
      endZ = safeZ
      OnRapid()
   end
end

function OnSetFeed()
end

function OnTapStart()
   post.Text(" M49\n") --disable FRO
   post.Text(" G95\n") --feed per rev
end

function OnAutoTap()
   clearance = 1 --tapping clearance height

--move to hole X,Y coordinates
   OnRapid()

--move to tapping clearance height
   clearance = clearance + drillStart
   endZ = clearance
   OnRapid()

--feed to depth
   feedRate = tapPitch * underFeed
   OnSetFeed()
   endZ = drillZ
   OnMove()

--retract to engage reverse clutch
   endZ = drillZ + tapTravel
   feedRate = 10000
   OnMove()

--feed out
   feedRate = tapPitch * reverseMult * underFeed
   endZ = tapTravel + clearance
   OnMove()

--retract to clearance plane
   endZ = safeZ
   OnRapid()

end

function OnRigidTap()
   clearance = 1 --tapping clearance height

   spindlecache = spindleSpeed

--spindle forwards
   if(spindleDir == 1) then
      OnSpindleCW()
   else
      OnSpindleCCW()
   end


--move to hole X,Y coordinates
   OnRapid()

--move to tapping clearance height
   endZ = clearance + drillStart
   OnRapid()

--tap to depth, correcting for underfeed
   feedRate = tapPitch * underFeed
   OnSetFeed()
   depthfix = (drillStart - drillZ) * (1 - underFeed)
   endZ = drillZ + depthfix
   OnMove()

--reverse spindle
   OnSpindleOff()
   spindleSpeed = spindlecache * reverseMult
   if(spindleDir == -1) then
      OnSpindleCW()
   else
      OnSpindleCCW()
   end

--feed out
   feedRate = tapPitch * reverseMult * underFeed
   OnSetFeed()
   endZ = clearance + drillStart
   OnMove()

--stop spindle and restore speed to tapping speed
   OnSpindleOff()
   spindleSpeed = spindlecache


--retract to clearance plane
   endZ = safeZ
   OnRapid() --retract to clearance plane

end


function OnTapEnd()
   post.Text(" M48\n") --enable FRO
   post.Text(" G94\n") --feed per min
end
